; ACME 0.96.4
; 
; [binary MAX Size: (16+16+12)*256 = 11264 bytes]
;
; DIGIDREAM: Sharpness Buzztone Tribute!
; featuring 
; - DIGIDRUM + PYM ("Pattern YM") Player for Apple IIe (128KB)
; - "AN3 Trick"
; 
; GROUiK / FRENCH TOUCH
; 03/2020
;
; v0.05 - bug of loop/tick reinit value fixed
; v0.04 - released first version
;
!cpu 6502
!convtab "a2txt.bin" ; 
!sl "lbl_main.txt"

; include
!source "include.a"
!source "lbl_drum.txt"

           *= $D000 ; ORG = $D000 (RAM Langage Card)

; =============================================================================
; SYSTEM/CONSTANT
; =============================================================================
; ZERO PAGE individual

; decompLZ4
src1        = $30   ; +$31
src2        = $32   ; +$33
dest        = $34   ; +$35
lenL        = $36
lenH        = $37
token       = $38

; INT1/2
saveA       = $40
saveY       = $41
saveX       = $42
Tick        = $43   ; +$44

; PLAYER YM/AY
; ------
nREG0		= $50
vREG0		= $51
dREG0		= $52	; +$53
nREG1		= $54
vREG1		= $55
dREG1		= $56	; +$57
nREG2		= $58
vREG2		= $59
dREG2		= $5A	; +$5B
nREG3		= $5C
vREG3		= $5D
dREG3		= $5E	; +$5F
nREG4		= $60
vREG4		= $61 
dREG4		= $62	; +$63
nREG5		= $64
vREG5		= $65 
dREG5		= $66	; +$67
nREG6		= $68
vREG6		= $69
dREG6		= $6A	; +$6B
nREG7		= $6C
vREG7		= $6D
dREG7		= $6E	; +$6F
nREG8		= $70
vREG8		= $71
dREG8		= $72	; +$73
nREG9		= $74
vREG9		= $75
dREG9		= $76	; +$77
nREGA		= $78
vREGA		= $79 
dREGA		= $7A	; +$7B
nREGB		= $7C
vREGB		= $7D 
dREGB		= $7E	; +$7F
nREGD		= $80
vREGD		= $81 
dREGD		= $82	; +$83
nREGE		= $84
vREGE		= $85
dREGE		= $86	; +$87

count1Pat   = $88
indexPat    = $89

iREG0       = $8A
iREG1       = $8B
iREG2       = $8C
iREG3       = $8D
iREG4       = $8E
iREG5       = $8F
iREG6       = $90
iREG7       = $91
iREG8       = $92
iREG9       = $93
iREGA       = $94
iREGB       = $95
iREGD       = $96
iREGE       = $97

pDrum       = $98   ; +$99
voice       = $9A
tempp       = $9B
; $9C MAX

; =================================================================================================
MAIN
!zone
            STA $C000           ; 80STOREOFF
            STA $C008           ; zero Page = Main (+ $FXXX MAIN)

            STA $C003           ; read AUX
            STA $C005           ; write AUX

            ; DigiDrum Loading
            LDA #$04
            STA PISDEP          ; piste 
            LDA #$80            ; chargement
            STA BUFFER+1        
            LDA #04
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; decomp digidrum
            LDA #<($8000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($8000+16)
            STA src2+1
            LDA #<($1000)
            STA dest            
            LDA #>($1000)
            STA dest+1
            JSR DECOMPLZ4

            ; Music Loading
            LDA #$05
            STA PISDEP          ; piste 
            LDA #$80            ; chargement
            STA BUFFER+1        
            LDA #17
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; decomp MUSIC
            LDA #<($8000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($8000+16)
            STA src2+1
            LDA #<($2000)
            STA dest            
            LDA #>($2000)
            STA dest+1
            JSR DECOMPLZ4

            STA $C004           ; write MAIN 
            
            ; GFX Loading
            LDA #$07
            STA PISDEP          ; piste 
            LDA #$20            ; chargement
            STA BUFFER+1        
            LDA #64
            STA TOTSEC      
            JSR FLOAD           ; chargement

            ; read AUX here

            ; set Hires mode
            BIT $C057
            BIT $C050
; =================================================================================================
Init_MB     ; init Mockingboard             
!zone
            ; init MB (6522/AY1) / (6522/AY2)
            LDA #$FF
            STA $C403          ; DDRA1
            STA $C483
            LDA #$07
            STA $C402          ; DDRB1
            STA $C482
            ; ---------
            ; clean REGISTER AY1 / AY2
            LDA #$00
            STA $C400
            STA $C480
            LDA #$04
            STA $C400
            STA $C480
            ; ---------
            LDA #PATTERNSIZE
            STA count1Pat
            LDA #0
            STA Tick
            STA Tick+1
            STA indexPat
            STA voice
            TAX                 ; = 0 - init with pattern 0
            JSR INIT_PATTERN
; -------------------------------------
Init_INT    ; init interrupt
!zone       
            ; pour IIe 
            LDA #<INT_ROUT
            STA $FFFE       
            LDA #>INT_ROUT
            STA $FFFF
 
            SEI                 ; inhib
            ; Set INT
            LDA #%01000000      ; T1 Continuous Interrupt (Free-Run Mode) / PB7 disabled 
            STA $C40B           ; Auxiliary Control Register (T1/6522/1)
            STA $C48B           ; ACR (T1/6522/2) 
            LDA #%11000000      ; T1 Enable
            STA $C40E           ; Interrupt Enable Register (T1/6522/1)
            
            LDA #%01000000      ; T1 Disable
            STA $C48E           ; IER (T1/6522/2)
; =================================================================================================            
            CLI                         ; music!
            
-           LDA VERTBLANK
            BPL -        
-           LDA VERTBLANK
            BMI -                       ; wait until next VBL

            ; 50Hz PAL Delay 
            ; fill registers for TIMER only (no INT here) - T1/6522/2  
            LDX #$36                                                        
            LDY #$4F                                                                   
            STX $C484                   ; T1C_1-Lower                    
            STY $C485                   ; T1C_1-High  (+reset interrupt flag)                      

LOOP        LDA $C48D
            AND #%01000000                   
            BEQ LOOP                    ; test bit6 -> T1 timer reach 0 (T1/6522/2)
    
            ; clear bit6 of the IFR
            BIT $C484                   ; T1/6522/2

            ; play one tick
            JSR PLAYER_PYM
            INC Tick                    ; inc frame counter                                             
            BNE +                                                                               
            INC Tick+1                                                                  
+           LDA Tick+1
            CMP #>FRAMEMAX 
            BNE LOOP
            LDA Tick
            CMP #<FRAMEMAX
            BNE LOOP

            ; set loop position
            LDA #PATTERNSIZE
            STA count1Pat
            LDX #PATLOOP
            STX indexPat
            JSR INIT_PATTERN
            LDA #<TICKLOOP
            STA Tick
            LDA #>TICKLOOP
            STA Tick+1
            JMP LOOP
; =================================================================================================
INT_ROUT    
!zone                       
            STA saveA
            STX saveX
            STY saveY
            LDY #00
		    LDA (pDrum),Y
            BMI .endINT2        ; end of digidrum
            STA tempp
            LDY VERTBLANK
            BMI +
            STA $C05E
+           LDY #$07
            LDX #$04
            LDA voice
            STA $C401
            STY $C400
            STX $C400   					
		    STA $C481   		
		    STY $C480   		
            STX $C480   		

		    LDA tempp
            LDY #$06
		    STA $C401
            STY $C400
            STX $C400   		
		    STA $C481   				
            STY $C480   		
            STX $C480   
            
            INC pDrum           ; prepare next data sample
            BNE +
            INC pDrum+1
+
            BIT $C404           ; INT again (T1/6522/1)
            LDA saveA
            LDX saveX
            LDY saveY 
            RTI

.endINT2    LDA #%01000000      ; stop INT (T1/6522/1)
            STA $C40E           ; VIA_IER
            LDA #00
            STA voice
            LDA saveA
            LDX saveX
            LDY saveY
            RTI
; =================================================================================================
PLAYER_PYM					
!zone
        LDA VERTBLANK
        BMI .r0
        STA $C05F   
.r0		SEI
        ; REGISTER 0
        LDA #$00				
        LDY #$07
		LDX #$04
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG0
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   		
		CLI

		DEC nREG0
		BNE .r1
        LDY iREG0
        LDA (dREG0),Y
		STA nREG0
		INY
		LDA (dREG0),Y
		STA vREG0
		INY
        STY iREG0
        
.r1		SEI
		; REGISTER 1
        LDA #$01				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG1
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

		DEC nREG1
		BNE .r2
        LDY iREG1
        LDA (dREG1),Y
		STA nREG1
		INY
		LDA (dREG1),Y
		STA vREG1
		INY
        STY iREG1
		
.r2		SEI
		; REGISTER 2
        LDA #$02				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG2
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG2
		BNE .r3
        LDY iREG2
        LDA (dREG2),Y
		STA nREG2
		INY
		LDA (dREG2),Y
		STA vREG2
		INY
        STY iREG2

.r3     SEI
		; REGISTER 3
        LDA #$03				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG3
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG3
		BNE .r4
        LDY iREG3
        LDA (dREG3),Y
		STA nREG3
		INY
		LDA (dREG3),Y
		STA vREG3
		INY
        STY iREG3

.r4     SEI
		; REGISTER 4
        TXA                 ; LDA #$04				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG4
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG4
		BNE .r5
        LDY iREG4
        LDA (dREG4),Y
		STA nREG4
		INY
		LDA (dREG4),Y
		STA vREG4
		INY
        STY iREG4

.r5     SEI
		; REGISTER 5
        LDA #$05				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG5
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG5
		BNE .r6
        LDY iREG5
        LDA (dREG5),Y
		STA nREG5
		INY
		LDA (dREG5),Y
		STA vREG5
		INY
        STY iREG5

.r6     SEI
		; REGISTER 6
        LDA #$06				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG6
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG6
		BNE .r7
        LDY iREG6
        LDA (dREG6),Y
		STA nREG6
		INY
		LDA (dREG6),Y
		STA vREG6
		INY
        STY iREG6

.r7     SEI
		; REGISTER 7
        LDA #$07				
        TAY                 ; LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG7
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREG7
		BNE .r8
        LDY iREG7
        LDA (dREG7),Y
		STA nREG7
		INY
		LDA (dREG7),Y
		STA vREG7
		INY
        STY iREG7

.r8     LDA voice
        CMP #08
        BEQ +
        SEI
        ; REGISTER 8
        LDA #$08				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

        LDY #$06
		LDA vREG8
        STA $C401
        STY $C400
        STX $C400
        LDA vREG8
        LSR   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI
+
        DEC nREG8
		BNE .r9
        LDY iREG8
        LDA (dREG8),Y
		STA nREG8
		INY
		LDA (dREG8),Y
		STA vREG8
		INY
        STY iREG8

.r9     LDA voice
        CMP #09
        BEQ +
        SEI
		; REGISTER 9
        LDA #$09				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREG9
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI	
+
        DEC nREG9
		BNE .ra
        LDY iREG9
        LDA (dREG9),Y
		STA nREG9
		INY
		LDA (dREG9),Y
		STA vREG9
		INY
        STY iREG9

.ra     LDA voice
        CMP #10
        BEQ +
        SEI
        ; REGISTER 10
        LDA #$0A				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

        LDY #$06
		LDA vREGA
        LSR
		STA $C401
        STY $C400
        STX $C400
        LDA vREGA   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI
+
        DEC nREGA
		BNE .rb
        LDY iREGA
        LDA (dREGA),Y
		STA nREGA
		INY
		LDA (dREGA),Y
		STA vREGA
		INY
        STY iREGA

.rb     SEI
		; REGISTER 11
        LDA #$0B				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREGB
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

        DEC nREGB
		BNE .rd
        LDY iREGB
        LDA (dREGB),Y
		STA nREGB
		INY
		LDA (dREGB),Y
		STA vREGB
		INY
        STY iREGB

        ; REGISTER 12       ; 0 for all values

.rd     ; REGISTER 13		; skip if = $FF
		LDA vREGD
		CMP #$FF
		BEQ .rdb
        SEI
        LDA #$0D				
        LDY #$07
        STA $C401
        STY $C400
        STX $C400   					
		STA $C481   		
		STY $C480   		
        STX $C480   		

		LDA vREGD
        LDY #$06
		STA $C401
        STY $C400
        STX $C400   		
		STA $C481   				
        STY $C480   		
        STX $C480   
		CLI

.rdb    DEC nREGD
		BNE .re
        LDY iREGD
        LDA (dREGD),Y
		STA nREGD
		INY
		LDA (dREGD),Y
		STA vREGD
		INY
        STY iREGD
        
.re     ; "REGISTER" E      ; containing digidrum information (0xXY => X voice-reg# | Y digidrum#)
        LDA vREGE           ; is beginning of digidrum this frame ?!
        BEQ +
        SEI
        TAY
        ; set digidrum#
        AND #0b11
        TAX
        LDA TDrumL,X
        STA pDrum
        LDA TDrumH,X
        STA pDrum+1
        ; set register voice# (high part of vREGE)
        TYA
        LSR
        LSR
        LSR
        LSR
        STA voice
        ; init DIGIDRUM INT (T1/6522/1)
        LDA #%11000000      
        STA $C40E                   ; interrupt Enable register (Timer 1 + Set) (T1/6522/1) 
        ; set TIMER delay (T1/6522/1)
        LDA #<(DELAYDIGI-2)
        STA $C404                   ; T1C_1-Lower    
        LDA #>(DELAYDIGI-2)
        STA $C405                   ; T1C_1-High 
        CLI
        ; ---------                      
+       DEC nREGE
		BNE .checkpattern
        LDY iREGE
        LDA (dREGE),Y
		STA nREGE
		INY
		LDA (dREGE),Y
		STA vREGE
		INY
        STY iREGE
		
.checkpattern
        DEC count1Pat       ; end of ONE pattern ?
        BEQ +               ; if yes, next pattern!
        RTS
+       ; next pattern
        LDA #PATTERNSIZE
        STA count1Pat
        INC indexPat
        LDX indexPat

MOD     BIT $C055
        LDA MOD+1
        EOR #($54XOR$55)
        STA MOD+1        

INIT_PATTERN
        ; init new pattern
        LDA D_REG0,X
        STA dREG0
        LDA D_REG0+NBPATTERNS,X
        STA dREG0+1
        LDY #00
        LDA (dREG0),Y
		STA nREG0
		INY
		LDA (dREG0),Y
		STA vREG0
		INY
        STY iREG0
        LDA D_REG1,X
        STA dREG1
        LDA D_REG1+NBPATTERNS,X
        STA dREG1+1
        LDY #00
        LDA (dREG1),Y
		STA nREG1
		INY
		LDA (dREG1),Y
		STA vREG1
		INY
        STY iREG1
        LDA D_REG2,X
        STA dREG2
        LDA D_REG2+NBPATTERNS,X
        STA dREG2+1
        LDY #00
        LDA (dREG2),Y
		STA nREG2
		INY
		LDA (dREG2),Y
		STA vREG2
		INY
        STY iREG2
        LDA D_REG3,X
        STA dREG3
        LDA D_REG3+NBPATTERNS,X
        STA dREG3+1
        LDY #00
        LDA (dREG3),Y
		STA nREG3
		INY
		LDA (dREG3),Y
		STA vREG3
		INY
        STY iREG3
        LDA D_REG4,X
        STA dREG4
        LDA D_REG4+NBPATTERNS,X
        STA dREG4+1
        LDY #00
        LDA (dREG4),Y
		STA nREG4
		INY
		LDA (dREG4),Y
		STA vREG4
		INY
        STY iREG4
        LDA D_REG5,X
        STA dREG5
        LDA D_REG5+NBPATTERNS,X
        STA dREG5+1
        LDY #00
        LDA (dREG5),Y
		STA nREG5
		INY
		LDA (dREG5),Y
		STA vREG5
		INY
        STY iREG5
        LDA D_REG6,X
        STA dREG6
        LDA D_REG6+NBPATTERNS,X
        STA dREG6+1
        LDY #00
        LDA (dREG6),Y
		STA nREG6
		INY
		LDA (dREG6),Y
		STA vREG6
		INY
        STY iREG6
        LDA D_REG7,X
        STA dREG7
        LDA D_REG7+NBPATTERNS,X
        STA dREG7+1
        LDY #00
        LDA (dREG7),Y
		STA nREG7
		INY
		LDA (dREG7),Y
		STA vREG7
		INY
        STY iREG7
        LDA D_REG8,X
        STA dREG8
        LDA D_REG8+NBPATTERNS,X
        STA dREG8+1
        LDY #00
        LDA (dREG8),Y
		STA nREG8
		INY
		LDA (dREG8),Y
		STA vREG8
		INY
        STY iREG8
        LDA D_REG9,X
        STA dREG9
        LDA D_REG9+NBPATTERNS,X
        STA dREG9+1
        LDY #00
        LDA (dREG9),Y
		STA nREG9
		INY
		LDA (dREG9),Y
		STA vREG9
		INY
        STY iREG9
        LDA D_REGA,X
        STA dREGA
        LDA D_REGA+NBPATTERNS,X
        STA dREGA+1
        LDY #00
        LDA (dREGA),Y
		STA nREGA
		INY
		LDA (dREGA),Y
		STA vREGA
		INY
        STY iREGA
        LDA D_REGB,X
        STA dREGB
        LDA D_REGB+NBPATTERNS,X
        STA dREGB+1
        LDY #00
        LDA (dREGB),Y
		STA nREGB
		INY
		LDA (dREGB),Y
		STA vREGB
		INY
        STY iREGB
        LDA D_REGD,X
        STA dREGD
        LDA D_REGD+NBPATTERNS,X
        STA dREGD+1
        LDY #00
        LDA (dREGD),Y
		STA nREGD
		INY
		LDA (dREGD),Y
		STA vREGD
        INY
        STY iREGD
        LDA D_REGE,X
        STA dREGE
        LDA D_REGE+NBPATTERNS,X
        STA dREGE+1
        LDY #00
        LDA (dREGE),Y
		STA nREGE
		INY
		LDA (dREGE),Y
		STA vREGE
        INY
        STY iREGE
        RTS
; =============================================================================
DECOMPLZ4
!zone
; routine de décompression LZ4
; code: XXL and FOX (from Atari Scene)
; small modification: FT

; init routine
					LDY #0
					STY lenH
					STY lenL	
; -------------------------------------
; décomp LZ4 routine
; -------------------------------------
.BP
             		jsr   	.GET_BYTE                  
                  	sta    	token
               		lsr
               		lsr
               		lsr
               		lsr
                  	beq    	.read_offset                     ; there is no literal
                  	cmp    	#$0f
                  	jsr    	.getLength
                  	
.b_literals         jsr    	.GET_BYTE
                  	jsr    	.store
                  	bne    	.b_literals
                  	
.read_offset       	jsr    	.GET_BYTE
                  	tax
                  	sec
                  	eor    	#$ff
                  	adc    	dest
                  	sta    	src1
                  	txa
                  	php							
                  	jsr    	.GET_BYTE
                  	plp
                  	bne    	.not_done
                  	tax
                  	beq    	.unlz4_done
.not_done          	eor    	#$ff
                  	adc    	dest+1
                  	sta    	src1+1
                  	; c=1
		            lda    	token
                  	and    	#$0f
                  	adc    	#$03                            ; 3+1=4
                  	cmp    	#$13
                  	jsr    	.getLength

.b1                 
                    lda     (src1),Y
                    
                  	INC 	src1
                  	BNE 	.s1
                  	INC 	src1+1
.s1                 jsr    	.store
                  	bne    	.b1
                  	jmp		.BP                  

.store             	sta    	(dest),Y
                  	INC		dest
                  	BNE 	.s2
 					INC 	dest+1                 	
.s2                 dec    	lenL
                  	bne    	.unlz4_done
                  	dec    	lenH
.unlz4_done        	rts

.getLength_next    	jsr    	.GET_BYTE
                  	tax
                  	clc
	                adc    	lenL
                  	bcc    	.s3
                  	inc    	lenH
.s3   	            inx

.getLength         	sta    	lenL
                  	beq    	.getLength_next
                  	tax
                  	beq    	.s4
                  	inc    	lenH
.s4 	            rts

		
.GET_BYTE			LDA		(src2),Y
					INC 	src2		
					BEQ 	.s5
					RTS					
.s5					INC 	src2+1			
					RTS
; =================================================================================================
NBPATTERNS   = 204          ; MAX 255!
PATTERNSIZE  = 96           ; MAX 128!
FRAMEMAX     = 19584
TICKLOOP     = 768
PATLOOP      = TICKLOOP/PATTERNSIZE

D_REG0 = $2000
D_REG1 = $26DE
D_REG2 = $28C4
D_REG3 = $3110
D_REG4 = $33B2
D_REG5 = $4616
D_REG6 = $4814
D_REG7 = $4A3C
D_REG8 = $4CE0
D_REG9 = $4F36
D_REGA = $53AC
D_REGB = $58CC
D_REGD = $5D02
D_REGE = $5F24

;
; ATARI ST MFP_CLOCK = 2457600
; A2 DELAY = 1000000(us)*1.017(Mhz)/(MFP/prediv)
; DELAY = 1000000*1.017/(2457600/(4*90))
DELAYDIGI = 149

TDrumL      !byte 0,<DRUM1,<DRUM2
TDrumH      !byte 0,>DRUM1,>DRUM2
; ------------------------------------------
ENDMAIN