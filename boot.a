; ACME 0.96.4
; boot.a
; boot0 (T0/S0) / boot1 (FLOAD) / boot2 (MAIN) 
; 
; 0.06: MB4C activation fix / main part loading fix 
; 0.05: SPECIAL IIc/MB4C (no more IIe refresh detection)
; 0.04: I don't care about SLOT# anymore I assume it's 6! 
;
!cpu 6502
!convtab "a2txt.bin"    ; incorporation table caractère APPLE II (normal) générale
!sl "lbl_boot.txt"

; include
!source "include.a"

	*= $800 ; ORG = $800

; =============================================================================
; =============================================================================
; ZERO PAGE individual
OUT2	= $12   ; +$13
Temp	= $FF
; =============================================================================

!byte 01			; premier octet réservé : nb de secteur à charger lors du boot 0

START
!zone

; quand on arrive là, le drive tourne, x = $60 (slot 6)

	; $801/$802/$803
	JMP INIT		;
	; BOOT 1 (FLOAD)    
	DEC OffHi		;                                                             
LOAD
	LDA OffHi
	CMP #(>FLOAD-1)	; on est au bout ? 
	BEQ +
	STA $27
	LDA nSector	; n Secteur
	STA $3D
MODSLOT	JMP $C65C		; lecture par la routine en ROM carte Disk II 
			; le retour se fait par le JMP $801 en sortie de cette routine
			; attention utilisation de $26,$27,$2B,$3C,$3D,$40,$41       
+	; BOOT 2 (MAIN)
	LDX #$00                
	STX SECDEP	; sector
	STX CURTRK1
	STX BUFFER	; buffer low = $00
	INX		; = 1
	STX PISDEP	; track 
	LDA #>MAIN	; 
	STA BUFFER+1	; buffer high = $D00
	LDA #08		; 
	STA TOTSEC              
	JSR FLOAD		; loading
	
	JMP MAIN		; saut Boot 2. Voilà c'est fini !                                        

INIT	JSR $FC58		; HOME (ROM)

	; DETECTION A2
	LDA #$00
	STA bIIc
	LDA $FBB3
	CMP #$06		; IIe/IIc/IIGS = 06 
	BEQ +
-	JMP BADGUY	; sinon II ($38) ou II+ ($EA) => bad guy1
+	; IIc ?
	LDA $FBC0		; détection IIc
	BEQ +		; 0 = IIc => bad guy2  / BEQ + => desactivate IIc detection KO (default BEQ -)
	; IIgs ou IIe ? 
	SEC
	JSR $FE1F		; TEST GS 
	BCS ++
	JMP BADGUY	; si Carry not set IIGS => bad guy3
	; wake up MB4C for IIc
+	LDA #$FF
	STA bIIc
	STA $C403	; init MB4C
	STA $C404
++
	; DETECTION MB (->OUT2)
	LDA #00
	STA OUT2          
bdet	LDA #$07		; on commence en $C7 jusqu'en $C1
	ORA #$C0		; -> $Cx
	STA OUT2+1
	LDY #04		; $CX04
	LDA (OUT2),Y	; timer 6522 (Low Order Counter) - attention compte à rebour !
	STA Temp		; 3 cycles
	LDA (OUT2),Y	; + 5 cycles = 8 cycles entre les deux accès au timer
	SEC		; 
	SBC Temp		; 
	CMP #$F8		; -8 (compte à rebour) ?
	BEQ +
	DEC bdet+1	; on décrémente le "slot" pour tester le suivant
	BNE bdet		; on boucle de 7 à 1
	JMP BADGUY	; on est arrivé au SLOT0 donc pas de MB!
+           
	LDA $C083
	LDA $C083		; write/read to RAM bank2 (Langage Card)

	LDA #$CE		; on écrit DEC nSector en $801 
	STA $801		; pour que le JMP $801 en fin de routine
	LDA #<nSector	; en $C605
	STA $802		; fasse une boucle avec le code en $801
	LDA #>nSector	;
	STA $803
	LDX #$60		; SLOT#6*$10
	JMP LOAD		; chargement FLOAD

BADGUY	LDA #$CB
	STA $400
	LDA #$CF
	STA $401
-	BNE -		; always -> boucle infinie bad guy


OffHi	!byte 0xFF	; offset dernier secteur pour lecture BOOT1 (FLOAD)
nSector	!byte 0x04	; n du dernier sector à lire (ordre inverse) pour BOOT1 (FLOAD)
EOF